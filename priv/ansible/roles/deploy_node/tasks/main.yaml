- name: setup_node
  environment:
    AWS_CONFIG_FILE: /home/admin/.aws/credentials
  block:
    - name: Populate service facts
      service_facts:

    - name: Find latest AWS file for {{ app_name }} in S3 and set it into variable
      ansible.builtin.script:
        cmd: latest_aws_release.sh {{ bucket_name }} {{ app_name }}
      register: aws_file_name

    - name: Create {{ app_name }} srv directory
      file:
        path: /srv/{{ app_name }}
        state: directory

    - name: Download {{ app_name }} from S3
      amazon.aws.aws_s3:
        bucket: "{{ bucket_name }}"
        mode: get
        object: "{{ aws_file_name.stdout_lines[0] }}"
        dest: /srv/{{ aws_file_name.stdout_lines[0] }}

    - name: Create /srv/{{ app_name }} directory
      file:
        path: /srv/{{ app_name }}
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Create /srv/unpack-directory directory
      file:
        path: /srv/unpack-directory
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Untar {{ aws_file_name.stdout_lines[0] }}
      unarchive:
        src: /srv/{{ aws_file_name.stdout_lines[0] }}
        dest: /srv/unpack-directory
        remote_src: true

    - name: Create release_history file
      stat:
        path: "/srv/current_release.txt"
      register: current_release_file

    - name: Check for release history
      stat:
        path: "/srv/release_history.txt"
      register: release_history_file

    - name: Create release_history file
      copy:
        content: ""
        dest: /srv/release_history.txt
        force: no
        group: sys
        owner: root
        mode: 0555
      when: current_release_file.stat.exists and not release_history_file.stat.exists

    - name: Write entry to release_history file
      shell: cat /srv/current_release.txt >> /srv/release_history.txt
      when: current_release_file.stat.exists

    - name: Write current release file
      ansible.builtin.copy:
        content: "{{ aws_file_name.stdout_lines[0] }}\n"
        dest: "/srv/current_release.txt"

    - name: Add erlang_systemd.service file to /etc/systemd/system/{{ app_name }}.service
      template:
        src: erlang_systemd.service.j2
        dest: /etc/systemd/system/{{ app_name }}.service
        owner: root
        group: root
        mode: 0644
      # when: app_name == item
      # loop: "{{ erlang_systemd }}"

    - name: Add environment varaibles to systemd.service file
      lineinfile:
        path: /etc/systemd/system/{{ app_name }}.service
        insertafter: RestartSec=5
        line: "Environment=\"{{ item }}\""
      loop: "{{ system_env }}"

    - name: Enable {{ app_name }} service
      systemd:
        name: "{{ app_name }}"
        enabled: true

    - name: Stop {{ app_name }} service
      systemd:
        name: "{{ app_name }}"
        state: stopped
      when: ansible_facts.services[ app_name ] is not defined

    - name: Delete old /srv/{{ app_name }} directory
      file:
        path: /srv/{{ app_name }}
        state: absent

    - name: Copy /srv/unpack-directory directory to /srv/{{ app_name }}
      copy:
        src: /srv/unpack-directory/
        dest: /srv/{{ app_name }}/
        mode: 0755
        remote_src: true

    - name: Delete /srv/unpack-directory directory
      file:
        path: /srv/unpack-directory
        state: absent

    - name: Start {{ app_name }} service
      systemd:
        daemon_reload: true
        name: "{{ app_name }}"
        state: started
  become: true
