terraform {
  experiments = [module_variable_optional_attrs]
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.29"
    }
  }
}

provider "aws" {
  region  = "<%= @aws_region %>"
}

<%= if @use_db do %>data "aws_rds_engine_version" "rds_postgres" {
  engine = "postgres"
}

resource "aws_db_subnet_group" "<%= @app_name %>_db_subnet" {
  name       = "<%= @app_name %>-db-subnet"
  subnet_ids = module.vpc.public_subnets

  tags = {
    Name = "<%= @app_name %>DB Subnet Group"
    Vendor = "Postgres"
    Type   = "Dataase"
  }
}

resource "aws_db_instance" "<%= @app_name %>_database" {
  allocated_storage         = 10
  db_name                   = "<%= @app_name %>"
  identifier                = "<%= @app_name %>-db"
  final_snapshot_identifier = "<%= @app_name %>-db-final-<%= Enum.random(1..1000) %>"
  engine                    = data.aws_rds_engine_version.rds_postgres.engine
  engine_version            = data.aws_rds_engine_version.rds_postgres.version
  db_subnet_group_name      = aws_db_subnet_group.<%= @app_name %>_db_subnet.name
  vpc_security_group_ids    = [module.app_security_group.security_group_id]
  instance_class            = "db.t3.micro"
  username                  = "postgres"
  password                  = "<%= @db_password %>"

  tags = {
    Name = "<%= @app_name %>DB"
    Vendor = "Postgres"
    Type   = "Dataase"
  }
}<% end %>

module "ec2_instance" {
  source = "./modules/aws-instance"

  for_each = var.<%= @app_name %>_project

  resource_group = var.resource_group
  instance_name  = each.value.name
  environment    = var.environment

  tags                        = try(each.value.tags, null)
  instance_type               = try(each.value.instance_type, null)
  instance_count              = try(each.value.instance_count, null)
  instance_ebs_secondary_size = try(each.value.instance_ebs_secondary_size, null)

  enable_eip = try(each.value.enable_eip, null)
  enable_ebs = try(each.value.enable_ebs, null)
  enable_elb = try(each.value.enable_lb, null)

  elb_port          = try(each.value.elb_port, null)
  elb_instance_port = try(each.value.elb_instance_port, null)

  security_group_id = module.app_security_group.security_group_id
  subnet_ids        = module.vpc.public_subnets

  key_pair_key_name = aws_key_pair.key_pair.key_name
}

